generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]

}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  
  //url      = env("DATABASE_LOCAL_URL")
}

model User {
  id                  String @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  hashedPassword      String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  favoriteListingsIds String[] @db.ObjectId
  favoriteProductsIds String[] @db.ObjectId
  ratingListingsIds   String[] @db.ObjectId
  ratingProductsIds   String[] @db.ObjectId

  accounts Account[]
 

  senderNotifications     Notification[] @relation("sender")
  recipientNotifications  Notification[] @relation("recipient")
  // recipientMessage        Message[] @relation("recipient")
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Notification {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  recipientId   String @db.ObjectId //receptor
  senderId      String @db.ObjectId //receptor
  itemId        String? 
  itemName      String?
  item2Id       String? // Required when the listingId and productId is required
  UTC           String
  type          String 
  content       String  
  count         Int
  timestamp     Int
  status        Int
  createdAt     DateTime @default(now())

  sender User @relation(fields: [senderId], references: [id], name: "sender")
  recipient User @relation(fields: [recipientId], references: [id], name: "recipient")
}

type Select {
    label                 String
    value                 String
    lowercaseLabel        String

}

model Car {
  id                      String @id @default(auto()) @map("_id") @db.ObjectId
  year                    String
  make                    String
  model                   String
  ownershipDocument       String
  paidOff                 String
  vehicleCondition        String
  wheels                  String
  bodyDamage              String
  partMissing             String
  allWheels               String
  battery                 String
  catalytic               String
  vin                     String
  mileage                 String
  bodyDamageDescription   String?
  partMissingDescription  String?
  city                    String
  state                   String
  zip                     String
  phone                   String
  formattedPhone          String?
  phone2                  String?
  formattedphone2         String?
  name                    String
  engine                  String? 
  noOrder                 String? 
  sellType                String? 
  price                   String? 
  price2                  String? 
  status                  String? 
  buyerName               String? 
  buyerEmail              String? 
  createdAt               DateTime @default(now())

  
}

