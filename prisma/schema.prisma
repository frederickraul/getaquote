generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]

}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  
  //url      = env("DATABASE_LOCAL_URL")
}

model User {
  id                      String @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  image                   String?
  hashedPassword          String?
  isActive                Boolean?
  emailToken              String?
  isAdmin                 Boolean?
  emailResetPassword      String?
  passwordResetTokenExpires DateTime?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
 

  senderNotifications     Notification[] @relation("sender")
  recipientNotifications  Notification[] @relation("recipient")
  // recipientMessage        Message[] @relation("recipient")
}



model Notification {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  recipientId   String @db.ObjectId //receptor
  senderId      String @db.ObjectId //receptor
  itemId        String? 
  itemName      String?
  item2Id       String? // Required when the listingId and productId is required
  UTC           String
  type          String 
  content       String  
  count         Int
  timestamp     Int
  status        Int
  createdAt     DateTime @default(now())

  sender User @relation(fields: [senderId], references: [id], name: "sender")
  recipient User @relation(fields: [recipientId], references: [id], name: "recipient")
}

type Select {
    label                 String
    value                 String
    lowercaseLabel        String

}

model Car {
  id                      String @id @default(auto()) @map("_id") @db.ObjectId
  year                    String
  make                    String
  model                   String
  ownershipDocument       String
  paidOff                 String
  vehicleCondition        String
  wheels                  String
  bodyDamage              String
  partMissing             String
  allWheels               String
  battery                 String
  catalytic               String
  vin                     String
  mileage                 String
  bodyDamageDescription   String?
  partMissingDescription  String?
  city                    String
  state                   String
  zip                     String
  address                 String?
  phone                   String
  formattedPhone          String?
  phone2                  String?
  formattedphone2         String?
  name                    String
  engine                  String? 
  noOrder                 String? 
  sellType                String? 
  price                   String? 
  price2                  String? 
  status                  String? 
  buyerName               String? 
  buyerEmail              String? 
  createdAt               DateTime @default(now())  
}

model Buyer {
  id                      String @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  email                   String
  phone                   String? 
  address                 String? 
  createdAt               DateTime @default(now())  
}

